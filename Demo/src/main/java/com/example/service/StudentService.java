package com.example.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import com.example.entity.Address;
import com.example.entity.Student;
import com.example.entity.Subject;
import com.example.repository.AddressRepository;
import com.example.repository.StudentRepository;
import com.example.repository.SubjectRepository;
import com.example.request.CreateStudentRequest;
import com.example.request.InQueryRequest;
import com.example.request.CreateSubjectRequest;

import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import com.example.request.UpdateStudentRequest;

@Service
public class StudentService {

	/*
	 * In spring whatever, bussinees logic , whaterver we perform in database we do
	 * in service layer;
	 */
	@Autowired
	StudentRepository studentReposiotry;

	@Autowired
	AddressRepository addressRepository;

	@Autowired
	SubjectRepository subjectRepository;

	public List<Student> findAllStudents() {
		return studentReposiotry.findAll();
	}

	public Student createStudent(CreateStudentRequest createStudentRequest) {

		Student student = new Student(createStudentRequest);
		Address address = new Address();
		address.setStreet(createStudentRequest.getStreet());
		address.setCity(createStudentRequest.getCity());

		address = addressRepository.save(address);
		student.setAddress(address);

		student = studentReposiotry.save(student);

		List<Subject> subjectList = new ArrayList<>();

		for (CreateSubjectRequest createSubjectRequest : createStudentRequest.getSubjectsLearing()) {

			Subject subject = new Subject();
			subject.setSubject_name(createSubjectRequest.getSubject_name());
			subject.setMarks_obtained(createSubjectRequest.getMarks_obtained());
			subject.setStudent(student);

			subjectList.add(subject);

		}
		subjectRepository.saveAll(subjectList);

		student.setLearningSubject(subjectList);
		return student;

	}

	public Student updateStudent(UpdateStudentRequest updateStudentRequest) {
		Student student = studentReposiotry.findById(updateStudentRequest.getId()).get();

		if (updateStudentRequest.getFirstName() != null && !updateStudentRequest.getFirstName().isEmpty()) {
			student.setFirstName(updateStudentRequest.getFirstName());

		}

		student = studentReposiotry.save(student);

		/*
		 * The save method in the JpaRepository , can be used to create or update the
		 * Record. WHile creating the record on the entityclass Student, we explicilitly
		 * mentioned id as autogenerated, so we do not need to pass the id, in that case
		 * it will the create the new record. , while student class, have the id field
		 * then it update the corrosponding recoods.
		 */

		return student;
	}

	public String deleteStudent(int id) {
		studentReposiotry.deleteById(id);

		return "The student has been deleted successfully from the database";
	}

	public List<Student> getByFirstName(String firstName) {
		List<Student> byFirstName = studentReposiotry.findByFirstName(firstName);

		return byFirstName;
	}

	public List<Student> getByfirstNameAndLastName(String firstName, String lastName) {

		List<Student> studentByfirstNameandLastName = studentReposiotry.findByFirstNameAndLastName(firstName, lastName);

		return studentByfirstNameandLastName;

	}

	public List<Student> getByfirstNameOrLastName(String firstName, String lastName) {

		return studentReposiotry.findByFirstNameOrLastName(firstName, lastName);

	}

	public List<Student> getByFirstNameIn(InQueryRequest inQueryRequest) {
		return studentReposiotry.findByFirstNameIn(inQueryRequest.getFirstName());

	}

	public List<Student> getAllStudentsWithPagiantion(int page_no, int page_size) {
		Pageable pageable = PageRequest.of(page_no - 1, page_size);
		return studentReposiotry.findAll(pageable).getContent();

	}

	public List<Student> getAllStudentsWithSorting() {
		Sort sort = Sort.by(Sort.Direction.ASC, "firstName", "lastName");

		return studentReposiotry.findAll(sort);
	}

	public List<Student> likeQuery(String search) {
		return studentReposiotry.findByFirstNameContains(search);

	}

	public List<Student> startsWith(String search) {
		return studentReposiotry.findByFirstNameStartsWith(search);

	}

	public List<Student> selectQueryQithJPQl(String firstName, String lastName) {

		return studentReposiotry.getByFirstNameOrLastName(firstName, lastName);

	}

	public Integer updateWithJpql(int id, String firstName) {

		return studentReposiotry.updateFirstNameUsingJpql(id, firstName);

	}

	public Integer deleteWithJpql(String email) {

		return studentReposiotry.deleteUsingJPQL(email);

	}

	public List<Student> getByCity(String city) {

		// return studentReposiotry.findByAddressCity(city);
		return studentReposiotry.getByCity(city);

	}

}
